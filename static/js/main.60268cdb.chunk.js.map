{"version":3,"sources":["assets/income.svg","assets/outcome.svg","assets/total.svg","components/Summary/styles.ts","services/api.ts","hooks/useTransactions.tsx","components/Summary/index.tsx","components/TransactionsTable/styles.ts","assets/delete.svg","components/TransactionsTable/index.tsx","components/Dashboard/styles.ts","components/Dashboard/index.tsx","assets/logo.svg","components/Header/styles.ts","components/Header/index.tsx","styles/global.ts","components/NewTransactionModal/styles.ts","assets/close.svg","components/NewTransactionModal/index.tsx","App.tsx","index.tsx"],"names":["Container","styled","div","api","axios","create","baseURL","TransactionsContext","createContext","TransactionProvider","children","useState","transactions","setTransactions","transactionInput","a","post","createdAt","Date","response","transaction","data","useEffect","storagedTransactions","localStorage","getItem","currentTransactions","JSON","parse","get","then","setItem","stringify","Provider","value","createTransaction","clearTransactions","useTransactions","useContext","Summary","summary","reduce","accumulator","type","deposits","amount","total","withdraws","src","incomeImg","alt","Intl","NumberFormat","style","currency","format","outcomeImg","className","totalImg","TransactionsTable","onClick","map","title","category","DateTimeFormat","deleteImg","id","Dashboard","header","Content","Header","onOpenNewTransactionModal","logoImg","GlobalStyle","createGlobalStyle","colors","green","red","form","TransactionTypeContainer","RadioBox","button","props","isActive","transparentize","activeColor","darken","NewTransactionModal","isOpen","onRequestClose","setTitle","setAmount","setCategory","setType","handleCreateNewTransaction","event","preventDefault","overlayClassName","closeImg","onSubmit","placeholder","onChange","target","Number","App","isNewTransactionModalOpen","setIsNewTransactionModalOpen","Modal","setAppElement","createServer","models","Model","seeds","server","db","loadData","routes","this","namespace","schema","all","request","requestBody","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.60268cdb.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/income.d58effe2.svg\";","export default __webpack_public_path__ + \"static/media/outcome.6eb96d30.svg\";","export default __webpack_public_path__ + \"static/media/total.e90c2d1e.svg\";","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 2rem;\n  margin-top: -10rem;\n\n  div {\n    background: var(--shape);\n    padding: 1.5rem 2rem;\n    border-radius: 0.25rem;\n    color: var(--text-title);\n\n    header {\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n    }\n\n    strong {\n      display: block;\n      margin-top: 1rem;\n      font-size: 2rem;\n      font-weight: 500;\n      line-height: 3rem;\n    }\n\n    &.highlight-background {\n      background: var(--green);\n      color: #FFF;\n    }\n  }\n`\n","import axios from 'axios'\n\nexport const api = axios.create({\n  baseURL: 'http://localhost:3000/api'\n})\n","import { createContext, useEffect, useState, ReactNode, useContext } from \"react\";\nimport { api } from \"../services/api\";\n\ninterface Transaction {\n  id: number;\n  title: string;\n  amount: number;\n  type: string;\n  category: string;\n  createdAt: string;\n}\n\ninterface TransactionProviderProps {\n  children: ReactNode;\n}\n\ntype TransactionInput = Omit<Transaction, 'id' | 'createdAt'>\n\ninterface TransactionsContextData {\n  transactions: Transaction[];\n  createTransaction: (transaction: TransactionInput) => Promise<void>;\n  clearTransactions: () => void;\n}\n\n\nconst TransactionsContext = createContext<TransactionsContextData>({} as TransactionsContextData)\n\nexport function TransactionProvider({ children }: TransactionProviderProps) {\n  const [transactions, setTransactions] = useState<Transaction[]>([])\n\n  useEffect(() => {\n    const storagedTransactions = localStorage.getItem('@dtmoney:transactions')\n\n    if (storagedTransactions) {\n      const currentTransactions = JSON.parse(storagedTransactions)\n      setTransactions(currentTransactions)\n    } else {\n      api.get('transactions').then(response => setTransactions(response.data.transactions))\n    }\n\n  }, [])\n\n  useEffect(() => {\n    localStorage.setItem('@dtmoney:transactions', JSON.stringify(transactions))\n  }, [transactions])\n\n  async function createTransaction(transactionInput: TransactionInput) {\n    const response = await api.post('/transactions', {...transactionInput, createdAt: new Date()})\n\n    const { transaction } = response.data\n\n    setTransactions([ ...transactions, transaction ])\n  }\n\n  function clearTransactions() {\n    setTransactions([])\n  }\n\n  return (\n    <TransactionsContext.Provider value={{ transactions, createTransaction, clearTransactions }}>\n      {children}\n    </TransactionsContext.Provider>\n  )\n}\n\nexport function useTransactions() {\n  const context = useContext(TransactionsContext)\n\n  return context\n}\n\n","import incomeImg from '../../assets/income.svg'\nimport outcomeImg from '../../assets/outcome.svg'\nimport totalImg from '../../assets/total.svg'\nimport { Container } from \"./styles\";\nimport { useTransactions } from '../../hooks/useTransactions';\n\nexport function Summary() {\n  const { transactions } = useTransactions()\n\n  const summary = transactions.reduce((accumulator, transaction) => {\n\n    if (transaction.type === 'deposit') {\n      accumulator.deposits += transaction.amount\n      accumulator.total += transaction.amount\n    } else {\n      accumulator.withdraws += transaction.amount\n      accumulator.total -= transaction.amount\n    }\n\n    return accumulator\n  }, {\n    deposits: 0,\n    withdraws: 0,\n    total: 0\n  })\n\n  return (\n    <Container>\n      <div>\n        <header>\n          <p>Incomes</p>\n          <img src={incomeImg} alt=\"Entradas\" />\n        </header>\n        <strong>\n          {new Intl.NumberFormat('pt-BR', {\n            style: 'currency',\n            currency: 'BRL'\n          }).format(summary.deposits)}\n        </strong>\n      </div>\n      <div>\n        <header>\n          <p>Withdraws</p>\n          <img src={outcomeImg} alt=\"Saídas\" />\n        </header>\n        <strong>\n          - {new Intl.NumberFormat('pt-BR', {\n            style: 'currency',\n            currency: 'BRL'\n            }).format(summary.withdraws)}\n        </strong>\n      </div>\n      <div className='highlight-background'>\n        <header>\n          <p>Total</p>\n          <img src={totalImg} alt=\"Total\" />\n        </header>\n        <strong>\n          {new Intl.NumberFormat('pt-BR', {\n            style: 'currency',\n            currency: 'BRL'\n          }).format(summary.total)}\n        </strong>\n      </div>\n    </Container>\n  )\n}\n","import styled from 'styled-components'\n\nexport const Container = styled.div`\n  margin-top: 4rem;\n\n  table {\n    width: 100%;\n    border-spacing: 0 0.5rem;\n\n    th {\n      color: var(--text-body);\n      font-weight: 400;\n      padding: 1rem 2rem;\n      text-align: left;\n      line-height: 1.5rem;\n\n      &:last-child {\n        text-align: right;\n        padding: 0;\n      }\n    }\n\n    td {\n      padding: 1rem 2rem;\n      border: 0;\n      background: var(--shape);\n      color: var(--text-body);\n      border-radius: 0.25rem;\n\n      &:first-child {\n        color: var(--text-title);\n      }\n\n      &:last-child {\n        text-align: right;\n      }\n\n      &.deposit {\n        color: var(--green);\n      }\n\n      &.withdraw {\n        color: var(--red);\n      }\n    }\n\n    button {\n      font-size: 1rem;\n      color: #FFF;\n      background: var(--red);\n      border: 0;\n      padding: 0 2rem;\n      border-radius: 0.25rem;\n      height: 3rem;\n\n      transition: filter 0.2s;\n\n      &:hover {\n        filter: brightness(0.9);\n      }\n\n      &.transaction-button {\n        background: none;\n        height: 0;\n        padding: 0;\n      }\n    }\n  }\n`\n","export default __webpack_public_path__ + \"static/media/delete.73fbebdb.svg\";","import { useTransactions } from \"../../hooks/useTransactions\";\nimport { Container } from \"./styles\";\nimport deleteImg from '../../assets/delete.svg'\n\nexport function TransactionsTable() {\n  const { transactions, clearTransactions } = useTransactions()\n\n  return (\n    <Container>\n      <table>\n        <thead>\n          <tr>\n            <th>Title</th>\n            <th>Value</th>\n            <th>Category</th>\n            <th>Date</th>\n            <th>\n              <button type=\"button\" onClick={clearTransactions}>Clear transactions</button>\n            </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {transactions.map(transaction => (\n            <tr key={transaction.id}>\n              <td>{transaction.title}</td>\n              <td className={transaction.type}>\n                {new Intl.NumberFormat('pt-BR', {\n                  style: 'currency',\n                  currency: 'BRL'\n                }).format(transaction.amount)}\n              </td>\n              <td>{transaction.category}</td>\n              <td>\n                {new Intl.DateTimeFormat('pt-BR').format(new Date(transaction.createdAt))}\n              </td>\n              <td>\n              <button type=\"button\" className='transaction-button'>\n                <img src={deleteImg} alt=\"Delete transaction\" />\n              </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </Container>\n  )\n}\n","import styled from 'styled-components'\n\nexport const Container = styled.div`\n  max-width: 1120px;\n  margin: 0 auto;\n  padding: 2.5rem 1rem;\n`\n","import { Summary } from \"../Summary\";\nimport { TransactionsTable } from \"../TransactionsTable\";\nimport { Container } from \"./styles\";\n\nexport function Dashboard() {\n  return (\n    <Container>\n      <Summary />\n      <TransactionsTable />\n    </Container>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/logo.614d71d1.svg\";","import styled from 'styled-components'\n\nexport const Container = styled.header`\n  background: var(--blue);\n`\nexport const Content = styled.div`\n  max-width: 1120px;\n  margin: 0 auto;\n\n  padding: 2rem 1rem 12rem;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  button {\n    font-size: 1rem;\n    color: #FFF;\n    background: var(--blue-light);\n    border: 0;\n    padding: 0 2rem;\n    border-radius: 0.25rem;\n    height: 3rem;\n\n    transition: filter 0.2s;\n\n    &:hover {\n      filter: brightness(0.9);\n    }\n  }\n`\n","import logoImg from '../../assets/logo.svg'\nimport { Container, Content } from './styles'\n\ninterface HeaderProps {\n  onOpenNewTransactionModal: () => void;\n}\n\nexport function Header({ onOpenNewTransactionModal }: HeaderProps) {\n  return (\n    <Container>\n      <Content>\n        <img src={logoImg} alt=\"dt money\" />\n        <button type=\"button\" onClick={onOpenNewTransactionModal}>\n          New transaction\n        </button>\n      </Content>\n    </Container>\n  )\n}\n","import { createGlobalStyle } from 'styled-components'\n\nexport const GlobalStyle = createGlobalStyle`\n  :root {\n    --background: #F0F2F5;\n    --shape: #FFF;\n\n    --green: #33CC95;\n    --red: #E52E4D;\n    --blue: #5429CC;\n    --blue-light: #6933FF;\n\n    --text-title: #363F5F;\n    --text-body: #969CB3;\n\n    --input-background: #E7E9EE;\n  }\n\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n\n  html {\n    @media (max-width: 1080px) {\n      font-size: 93.75%; //15px\n    }\n\n    @media (max-width: 720px) {\n      font-size: 87.5%; //14px\n    }\n  }\n\n  body {\n    background: var(--background);\n    -webkit-font-smothing: antialiased;\n  }\n\n  body, input, textarea, button {\n    font-family: 'Poppins', sans-serif;\n    font-weight: 400;\n  }\n\n  h1, h2, h3, h4, h5, h6, strong {\n    font-weight: 600;\n  }\n\n  button {\n    cursor: pointer;\n  }\n\n  [disabled] {\n    opacity: 0.6;\n    cursor: not-allowed;\n  }\n\n  .react-modal-overlay {\n    background: rgba(0, 0, 0, 0.5);\n\n    position: fixed;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n\n  .react-modal-content {\n    width: 100%;\n    max-width: 576px;\n    background: var(--background);\n    padding: 3rem;\n    position: relative;\n    border-radius: 0.25rem;\n  }\n\n  .react-modal-close {\n    position: absolute;\n    right: 1.5rem;\n    top: 1.5rem;\n    border: 0;\n    background: transparent;\n\n    transition: filter 0.2s;\n\n    &:hover {\n      filter: brightness(0.8);\n    }\n  }\n\n`\n","import styled from 'styled-components'\nimport { darken, transparentize } from 'polished'\n\ninterface RadioBoxProps {\n  isActive: boolean;\n  activeColor: 'green' | 'red';\n}\n\nconst colors = {\n  green: '#33cc95',\n  red: '#e52e4d'\n}\n\nexport const Container = styled.form`\n  h2 {\n    color: var(--text-title);\n    font-size: 1.5rem;\n    margin-bottom: 2rem;\n  }\n\n  input {\n    width: 100%;\n    padding: 0 1.5rem;\n    height: 4rem;\n    border-radius: 0.25rem;\n\n    border: 1px solid #d7d7d7;\n    background: var(--input-background);\n\n    font-weight: 400;\n    font-size: 1rem;\n\n    &::placeholder {\n    color: var(--text-body);\n    }\n\n    & + input {\n      margin-top: 1rem;\n    }\n  }\n\n  button[type='submit'] {\n    width: 100%;\n    padding: 0 1.5rem;\n    height: 4rem;\n    background: var(--green);\n    color: #FFF;\n    border-radius: 0.25rem;\n    border: 0;\n    font-size: 1rem;\n    margin-top: 1.5rem;\n    font-weight: 600;\n\n    transition: filter 0.2s;\n\n    &:hover {\n      filter: brightness(0.9);\n    }\n  }\n`\n\nexport const TransactionTypeContainer = styled.div`\n  margin: 1rem 0;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 0.5rem;\n`\n\nexport const RadioBox = styled.button<RadioBoxProps>`\n  height: 4rem;\n  border: 1px solid #d7d7d7;\n  border-radius: 0.25rem;\n\n  background: ${(props) => props.isActive ? transparentize(0.9, colors[props.activeColor]) : 'transparent'};\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  transition: border-color 0.2s;\n\n  &:hover {\n    border-color: ${darken(0.1, '#d7d7d7')}\n  }\n\n  img {\n    width: 20px;\n    height: 20px;\n  }\n\n  span {\n    display: inline-block;\n    margin-left: 1rem;\n    font-size: 1rem;\n    color: var(--text-title);\n  }\n`\n","export default __webpack_public_path__ + \"static/media/close.f62862c6.svg\";","import Modal from 'react-modal'\nimport { Container, TransactionTypeContainer, RadioBox } from './styles'\nimport closeImg from '../../assets/close.svg'\nimport incomeImg from '../../assets/income.svg'\nimport outcomeImg from '../../assets/outcome.svg'\nimport { FormEvent, useState } from 'react'\nimport { useTransactions } from '../../hooks/useTransactions'\n\ninterface NewTransactionModalProps {\n  isOpen: boolean;\n  onRequestClose: () => void;\n}\n\nexport function NewTransactionModal({ isOpen, onRequestClose }: NewTransactionModalProps) {\n  const [title, setTitle] = useState('')\n  const [amount, setAmount] = useState(0)\n  const [category, setCategory] = useState('')\n  const [type, setType] = useState('deposit')\n  const { createTransaction } = useTransactions()\n\n  const handleCreateNewTransaction = async (event: FormEvent) => {\n    event.preventDefault()\n\n    await createTransaction({\n      title,\n      amount,\n      category,\n      type\n    })\n\n    setTitle('')\n    setAmount(0)\n    setCategory('')\n    setType('deposit')\n    onRequestClose()\n  }\n\n  return(\n    <Modal\n      isOpen={isOpen}\n      onRequestClose={onRequestClose}\n      overlayClassName='react-modal-overlay'\n      className='react-modal-content'\n    >\n\n      <button type='button' onClick={onRequestClose} className='react-modal-close'>\n        <img src={closeImg} alt=\"Fechar modal\" />\n      </button>\n\n      <Container onSubmit={handleCreateNewTransaction}>\n        <h2>Register transaction</h2>\n\n        <input\n          type=\"text\"\n          placeholder='Title'\n          value={title}\n          onChange={event => setTitle(event.target.value)}\n        />\n\n        <input\n          type='number'\n          placeholder='Value'\n          value={amount}\n          onChange={event => setAmount(Number(event.target.value))}\n        />\n\n        <TransactionTypeContainer>\n          <RadioBox\n            type='button'\n            onClick={() => { setType('deposit') }}\n            isActive={type === 'deposit'}\n            activeColor='green'\n          >\n            <img src={incomeImg} alt=\"Entrada\" />\n            <span>Income</span>\n          </RadioBox>\n\n          <RadioBox\n            type='button'\n            onClick={() => { setType('withdraw') }}\n            isActive={type === 'withdraw'}\n            activeColor='red'\n          >\n            <img src={outcomeImg} alt=\"Saida\" />\n\n            <span>Withdraw</span>\n          </RadioBox>\n        </TransactionTypeContainer>\n\n        <input\n          placeholder='Category'\n          value={category}\n          onChange={event => setCategory(event.target.value)}\n        />\n\n        <button type=\"submit\">\n          Register\n        </button>\n      </Container>\n    </Modal>\n  )\n}\n","import { Dashboard } from \"./components/Dashboard\";\nimport { Header } from \"./components/Header\";\nimport { GlobalStyle } from \"./styles/global\";\nimport { NewTransactionModal } from './components/NewTransactionModal'\nimport { useState } from \"react\";\nimport Modal from 'react-modal'\nimport { TransactionProvider } from \"./hooks/useTransactions\";\n\nModal.setAppElement('#root')\n\nexport function App() {\n  const [isNewTransactionModalOpen, setIsNewTransactionModalOpen] = useState(false)\n\n  const handleOpenNewTransactionModal = () => {\n    setIsNewTransactionModalOpen(true)\n  }\n\n  const handleCloseNewTransactionModal = () => {\n    setIsNewTransactionModalOpen(false)\n  }\n\n  return (\n    <TransactionProvider>\n      <Header onOpenNewTransactionModal={handleOpenNewTransactionModal}/>\n      <Dashboard />\n      <NewTransactionModal isOpen={isNewTransactionModalOpen} onRequestClose={handleCloseNewTransactionModal} />\n      <GlobalStyle />\n    </TransactionProvider>\n  );\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport { createServer, Model } from 'miragejs'\n\ncreateServer({\n  models: {\n    transaction: Model,\n  },\n\n  seeds(server) {\n    server.db.loadData({\n      transactions: [\n        {\n          id: 1,\n          title: 'Website freelance',\n          type: 'deposit',\n          category: 'Dev',\n          amount: 6000,\n          createdAt: new Date('2021-08-31 01:00:00'),\n        },\n        {\n          id: 2,\n          title: 'Rent',\n          type: 'withdraw',\n          category: 'House',\n          amount: 1100,\n          createdAt: new Date('2021-08-22 11:00:00'),\n        }\n      ],\n    })\n  },\n\n  routes() {\n    this.namespace = 'api'\n\n    this.get('/transactions', () => {\n      return this.schema.all('transaction')\n    })\n\n    this.post('/transactions', (schema, request) => {\n      const data = JSON.parse(request.requestBody);\n\n      return schema.create('transaction', data)\n    })\n  }\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}